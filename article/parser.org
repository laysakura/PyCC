* 文法
program :=
function-definition* end-of-file

# definition :=
#   function-definition

function-definition :=
  int identifier '(' parameter-list ')' compound-statement
     -> function identifier
        `compound-statement`
        endfunction identifier

parameter-list :=
    EPSILON
  | parameter ( , parameter )*

parameter :=
  int identifier

# type-expression :=
#   int 

----------------------------------------------
compound-statement :=
  '{' var-declaration* statement* '}'

statement :=
    ';'
  | continue ';'  -> goto L_test (most recent)
  | break ';'     -> goto L_false (most recent)
  | return equality ';'  -> return equality
  | compound-statement
  | if-statement
  | while-statement
  | equality ';'

var-declaration :=
  int identifier ';'

if-statement :=
  if '(' equality ')' statement ( else statement )?
     ->           if_false equality goto L_false
                  `true_statement`  # parse_statement will emit some codes
        L_false:

  | if '(' equality ')' statement ( else statement )?
     ->           if_false equality goto L_false
                  `true_statement`  # parse_statement will emit some codes
                  goto L_fi
        L_false:  `false_statement`
        L_fi:     (no code)

while-statement :=
  while '(' equality ')' statement
     -> L_test:   if_false equality goto L_false
                  `statement`  # parse_statement will emit some codes
                  goto L_test
        L_false:  (no code)

----------------------------------------------

equality :=
         rel == rel
         | rel != rel
         | rel

rel :=
    expression < expression  (そのままの形を，集約後のものとして返す)
    | expression <= expression
    | expression >= expression
    | expression > expression
    | expression = expression  -> expression = expression
    | expression

expression :=
     term ('+' term)+  -> .t = term ('+' expression)+
     | term (- term)+  -> .t = term (- expression)+
     | term

term :=
     unary ('*' unary)+  -> .t = unary ('*' unary)+
     | unary (/ unary)+  -> .t = unary (/ unary)+
     | unary (% term)+  -> .t = unary (% unary)+
     | unary

unary :=
      ! unary  ->  .t = ! unary
      | + unary
      | - unary  ->  .t = - unary
      | factor

factor :=
       id
       | '(' expression ')'
       | int-literal
       | id '(' args-list ')'  ->  call id arg1 arg2 ...

args-list :=
          (expression (, expression)*)?


* 最初は
    term := unary * term | ....
  とかの文法にしてたけど，これじゃあ右結合．例えば，
    52471810 * 6 / 100000000
  で困った．
* 構文主導主義で，パースしていく間に中間言語と記号表を作る
* parserはやっぱり状態機械．どこまでトークンを読んだという情報を元に動く．
  だからclassが自然かな．
* _parse*()は，全て自分の先頭のtokenをパースする．
* パースエラーを出すのは，tokenを取ったときだけ
* 各演算(multiplicative-expression, additive-exprssion)は，各々その計算結果
  の入った一時変数に置き換えられる．
  つまり，計算結果が早く出るように(早く集約するように)定義された
  multiplicative-expression
  の方が優先度を高く計算されていることになる．
* _parse*()は，全てreductionした後のトークンを返すようにしているが，test文やargs-listだけは
  わざわざトークンにするのが気持ち悪いので，文字列として返している
** それをやると，
     while(1)
   と
     while(a < b)
   とがあるので，わざわざtest文の型チェックをしないといけなくなり面倒．
   tokenに統一
* gasでラベルだけ2つ連続しててもOKなのは確認した．
  .L2
  .L3
      hoge
  とか
* breakにしてもcontinueにしても，効果があるのは直近(最内)のwhileに対して．
  すなわち，while-statementのstatement部に対して出てくるもの．
  ということは，直近のwhile-statementで使用されたlabelさえ覚えておけば，
  ちゃんとgotoに変換できる
* scopeができるたびにvartable.new_svlist()が必要．そうしないと，vartable.svlistsが親を辿っていくことが出来なくなる
* 変数が被っててもエラーにならないよ
* 引数の数とかが合わない関数呼出しもエラーにならないよ
* 関数定義の部分だけはスコープを一つ深くすると考えるとうまい．
  そうしないと，関数は全てグローバルスコープであって，「自分のスコープ
  以下のスタックフレームサイズを教えて」ができなくて非常に面倒
* unary(変数，数値，関数呼出し)は，codegenにおいて種類が見分けられないとならない
  (例えば，vartable.place_of(111)とかやるのを防ぐため)
  なので，unaryだけは中間コードに落とす際もトークンのままにする
** それはparserのソース的にきっついので，やっぱりcodegenに判定関数を設ける
* intcodeに，それがどのプログラム行から生成された中間コードかを示すフィールドを設ければ，
  cogenでもエラー行を表示することができる
